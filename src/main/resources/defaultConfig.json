{"author":"","version":"1.2.6","userSecure":"","currTypeMapperGroupName":"Default","currTemplateGroupName":"Default","currColumnConfigGroupName":"Default","currGlobalConfigGroupName":"Default","typeMapper": {"Default": {"name":"Default","elementList": [{"matchType":"REGEX","columnType":"varchar(\\(\\d+\\))?","javaType":"java.lang.String"}, {"matchType":"REGEX","columnType":"char(\\(\\d+\\))?","javaType":"java.lang.String"}, {"matchType":"REGEX","columnType":"(tiny|medium|long)*text","javaType":"java.lang.String"}, {"matchType":"REGEX","columnType":"decimal(\\(\\d+,\\d+\\))?","javaType":"java.lang.Double"}, {"matchType":"ORDINARY","columnType":"integer","javaType":"java.lang.Integer"}, {"matchType":"REGEX","columnType":"(tiny|small|medium)*int(\\(\\d+\\))?","javaType":"java.lang.Integer"}, {"matchType":"ORDINARY","columnType":"int4","javaType":"java.lang.Integer"}, {"matchType":"ORDINARY","columnType":"int8","javaType":"java.lang.Long"}, {"matchType":"REGEX","columnType":"bigint(\\(\\d+\\))?","javaType":"java.lang.Long"}, {"matchType":"ORDINARY","columnType":"date","javaType":"java.util.Date"}, {"matchType":"ORDINARY","columnType":"datetime","javaType":"java.util.Date"}, {"matchType":"ORDINARY","columnType":"timestamp","javaType":"java.util.Date"}, {"matchType":"ORDINARY","columnType":"time","javaType":"java.time.LocalTime"}, {"matchType":"ORDINARY","columnType":"boolean","javaType":"java.lang.Boolean"}]}},"template": {"spring-data-mongodb": {"name":"spring-data-mongodb","elementList": [{"name":"controller.java.vm","code":"##Import macro definition, set package name, class name, file name\n$!{define.vm}\n#setPackageSuffix(\"controller\")\n#setTableSuffix(\"Controller\")\n#save(\"/controller\", \"Controller.java\")\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##Define service name\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($serviceVarName = $!tool.firstLowerCase($serviceSortType))\n\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport lombok.AllArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.PostMapping;\nimport org.springframework.web.bind.annotation.RequestBody;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n\n/**\n * $!{tableInfo.comment}Control layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"/$!tool.firstLowerCase($!tableInfo.name)\")\n@AllArgsConstructor\npublic class $!{tableName} {\n\n\tprivate $serviceSortType $serviceVarName;\n\n\t/**\n\t * Obtain $!{tableInfo.comment} List (Pagination)\n\t */\n\t@GetMapping(\"/list\")\n\tpublic Page<$entityShortType> list(Pageable page) {\n\t\treturn null;\n\t}\n\n\t/**\n\t * Obtain $!{tableInfo.comment}\n\t */\n\t@GetMapping(\"/get\")\n\tpublic $entityShortType get($!pk.shortType id) {\n\t\treturn ${serviceVarName}.findById(id);\n\t}\n\n\t/**\n\t * Add to $!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/add\")\n\tpublic void add(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\n\t/**\n\t * Revise $!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/update\")\n\tpublic void update(@RequestBody $entityShortType $entityVarName) {\n\t\t${serviceVarName}.save($entityVarName);\n\t}\n\n\t/**\n\t * Delete $!{tableInfo.comment}\n\t */\n\t@PostMapping(\"/delete\")\n\tpublic void delete($!pk.shortType id) {\n\t\t${serviceVarName}.deleteById(id);\n\t}\n}\n"}, {"name":"entity.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Use macro definition to set callback (save location and file suffix)\n#save(\"/entity\", \".java\")\n\n##Set package suffix using macro definition\n#setPackageSuffix(\"entity\")\n\n##Implementing default package imports using global variables\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##Implement class annotation information using macro definitions\n#tableComment(\"Entity class\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##Use macro definitions to implement get, set methods\n#getSetMethod($column)\n#end\n}\n"}, {"name":"repository.java.vm","code":"##Import macro definition, set package name, class name, file name\n$!{define.vm}\n#setPackageSuffix(\"repository\")\n#setTableSuffix(\"Repository\")\n#save(\"/repository\", \"Repository.java\")\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##Entity class name, primary key class name\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\n\n/**\n * $!{tableInfo.comment} Persistence layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} extends MongoRepository<$entityShortType, $pkShortType> {\n}\n"}, {"name":"service.java.vm","code":"##Import macro definition, set package name, class name, file name\n$!{define.vm}\n#setPackageSuffix(\"service\")\n#setTableSuffix(\"Service\")\n#save(\"/service\", \"Service.java\")\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##Entity class name, primary key class name\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\n\n\n/**\n * $!{tableInfo.comment} Business Layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    void save($entityShortType $entityVarName);\n\n    void deleteById($pkShortType id);\n\n    $entityShortType findById($pkShortType id);\n\n    List<$entityShortType> findById(Collection<$pkShortType> ids);\n\n    Page<$entityShortType> list(Pageable page);\n}\n"}, {"name":"serviceImpl.java.vm","code":"##Import macro definition, set package name, class name, file name\n$!{define.vm}\n#setPackageSuffix(\"service.impl\")\n#setTableSuffix(\"ServiceImpl\")\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n##Business layer class name, persistence layer class name, entity name\n#set($serviceSortType = $!tool.append($!tableInfo.name, \"Service\"))\n#set($serviceType = $!tool.append($!tableInfo.savePackageName, \".service.\", $serviceSortType))\n#set($repositorySortType = $!tool.append($!tableInfo.name, \"Repository\"))\n#set($repositoryType = $!tool.append($!tableInfo.savePackageName, \".repository.\", $repositorySortType))\n#set($repositoryVarName = $!tool.firstLowerCase($!repositorySortType))\n#set($entityShortType = $!tableInfo.name)\n#set($entityType = $!tableInfo.psiClassObj.getQualifiedName())\n#set($entityVarName = $!tool.firstLowerCase($!tableInfo.name))\n#set($pkShortType = $!pk.shortType)\n#set($pkType = $!pk.type)\n\nimport $pkType;\nimport $entityType;\nimport $serviceType;\nimport $repositoryType;\nimport org.springframework.stereotype.Service;\nimport javax.annotation.Resource;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.Pageable;\nimport java.util.Collection;\nimport java.util.List;\nimport java.util.stream.Collectors;\nimport java.util.stream.StreamSupport;\n\n\n/**\n * $!{tableInfo.comment} Business Layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service\npublic class $!{tableName} implements $!serviceSortType {\n\n\t@Resource\n    private $repositorySortType $repositoryVarName;\n\n    @Override\n    public void save($entityShortType $entityVarName) {\n        $!{repositoryVarName}.save($entityVarName);\n    }\n\n    @Override\n    public void deleteById($pkShortType id) {\n        $!{repositoryVarName}.delete(id);\n    }\n\n    @Override\n    public $entityShortType findById($pkShortType id) {\n        return $!{repositoryVarName}.findOne(id);\n    }\n\n    @Override\n    public List<$entityShortType> findById(Collection<$pkShortType> ids) {\n        Iterable<$entityShortType> iterable = $!{repositoryVarName}.findAll(ids);\n        return StreamSupport.stream(iterable.spliterator(), false)\n                .collect(Collectors.toList());\n    }\n\n    @Override\n    public Page<$entityShortType> list(Pageable page) {\n        return $!{repositoryVarName}.findAll(page);\n    }\n}\n"}]},"MybatisPlus-Mixed": {"name":"MybatisPlus-Mixed","elementList": [{"name":"controller.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Controller\")\n\n##Save file (macro definition)\n#save(\"/controller\", \"Controller.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"controller\")\n\n##Define service name\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##Define entity object name\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table control layer\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * Service object\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * Query all data in pagination\n     *\n     * @param page Paging object\n     * @param $!entityName Query entity\n     * @return All data\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * Query a single piece of data by primary key\n     *\n     * @param id Primary key\n     * @return Single data\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * Add data\n     *\n     * @param $!entityName Entity object\n     * @return New result\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * Change the data\n     *\n     * @param $!entityName Entity object\n     * @return Modify results\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * Delete data\n     *\n     * @param idList Primary key binding\n     * @return Delete result\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"}, {"name":"dao.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Dao\")\n\n##Save file (macro definition)\n#save(\"/dao\", \"Dao.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"dao\")\n\nimport java.util.List;\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport org.apache.ibatis.annotations.Param;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table database access layer\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n\n/**\n* Add data in batches (MyBatis native foreach method)\n*\n* @param entities List<$!{tableInfo.name}> List of instance objects\n* @return Number of rows affected\n*/\nint insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n/**\n* Batch add or update data by primary key (MyBatis native foreach method)\n*\n* @param entities List<$!{tableInfo.name}> List of instance objects\n* @return Number of rows affected\n* @throws org.springframework.jdbc.BadSqlGrammarException When the input parameter is an empty List, an exception to SQL statement error will be thrown, please verify the input parameter by yourself\n*/\nint insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n}\n"}, {"name":"entity.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Save file (macro definition)\n#save(\"/entity\", \".java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"entity\")\n\n##Automatically import packages (global variables)\n$!autoImport\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table entity class\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * Get primary key value\n     *\n     * @return Primary key value\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"}, {"name":"mapper.xml.vm","code":"##Introduce mybatis support\n$!{mybatisSupport.vm}\n\n##Set save name and save location\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!-- Bulk insert -->\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n    <!-- Bulk insert or update by primary key -->\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.parent.name}.$!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n         #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name) #if($velocityHasNext), #end#end\n    </insert>\n\n</mapper>\n"}, {"name":"service.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Service\")\n\n##Save file (macro definition)\n#save(\"/service\", \"Service.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table service interface\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n}\n"}, {"name":"serviceImpl.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"ServiceImpl\")\n\n##Save file (macro definition)\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table service implementation class\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n}\n"}]},"MybatisPlus": {"name":"MybatisPlus","elementList": [{"name":"controller.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Controller\")\n\n##Save file (macro definition)\n#save(\"/controller\", \"Controller.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"controller\")\n\n##Define service name\n#set($serviceName = $!tool.append($!tool.firstLowerCase($!tableInfo.name), \"Service\"))\n\n##Define entity object name\n#set($entityName = $!tool.firstLowerCase($!tableInfo.name))\n\nimport com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;\nimport com.baomidou.mybatisplus.extension.api.ApiController;\nimport com.baomidou.mybatisplus.extension.api.R;\nimport com.baomidou.mybatisplus.extension.plugins.pagination.Page;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.annotation.Resource;\nimport java.io.Serializable;\nimport java.util.List;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table control layer\")\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($!tableInfo.name)\")\npublic class $!{tableName} extends ApiController {\n    /**\n     * Service object\n     */\n    @Resource\n    private $!{tableInfo.name}Service $!{serviceName};\n\n    /**\n     * Query all data in pagination\n     *\n     * @param page Paging object\n     * @param $!entityName Query entity\n     * @return All data\n     */\n    @GetMapping\n    public R selectAll(Page<$!tableInfo.name> page, $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.page(page, new QueryWrapper<>($!entityName)));\n    }\n\n    /**\n     * Query a single piece of data by primary key\n     *\n     * @param id Primary key\n     * @return Single data\n     */\n    @GetMapping(\"{id}\")\n    public R selectOne(@PathVariable Serializable id) {\n        return success(this.$!{serviceName}.getById(id));\n    }\n\n    /**\n     * Add data\n     *\n     * @param $!entityName Entity object\n     * @return New result\n     */\n    @PostMapping\n    public R insert(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.save($!entityName));\n    }\n\n    /**\n     * Change the data\n     *\n     * @param $!entityName Entity object\n     * @return Modify results\n     */\n    @PutMapping\n    public R update(@RequestBody $!tableInfo.name $!entityName) {\n        return success(this.$!{serviceName}.updateById($!entityName));\n    }\n\n    /**\n     * Delete data\n     *\n     * @param idList Primary key binding\n     * @return Delete result\n     */\n    @DeleteMapping\n    public R delete(@RequestParam(\"idList\") List<Long> idList) {\n        return success(this.$!{serviceName}.removeByIds(idList));\n    }\n}\n"}, {"name":"dao.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Dao\")\n\n##Save file (macro definition)\n#save(\"/dao\", \"Dao.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"dao\")\n\nimport com.baomidou.mybatisplus.core.mapper.BaseMapper;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table database access layer\")\npublic interface $!{tableName} extends BaseMapper<$!tableInfo.name> {\n}\n"}, {"name":"entity.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Save file (macro definition)\n#save(\"/entity\", \".java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"entity\")\n\n##Automatically import packages (global variables)\n$!{autoImport.vm}\nimport com.baomidou.mybatisplus.extension.activerecord.Model;\nimport java.io.Serializable;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table entity class\")\n@SuppressWarnings(\"serial\")\npublic class $!{tableInfo.name} extends Model<$!{tableInfo.name}> {\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})//${column.comment}#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n#getSetMethod($column)\n#end\n\n#foreach($column in $tableInfo.pkColumn)\n    /**\n     * Get primary key value\n     *\n     * @return Primary key value\n     */\n    @Override\n    protected Serializable pkVal() {\n        return this.$!column.name;\n    }\n    #break\n#end\n}\n"}, {"name":"service.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"Service\")\n\n##Save file (macro definition)\n#save(\"/service\", \"Service.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"service\")\n\nimport com.baomidou.mybatisplus.extension.service.IService;\nimport $!{tableInfo.savePackageName}.entity.$!tableInfo.name;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table service interface\")\npublic interface $!{tableName} extends IService<$!tableInfo.name> {\n}\n"}, {"name":"serviceImpl.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Set table suffix (macro definition)\n#setTableSuffix(\"ServiceImpl\")\n\n##Save file (macro definition)\n#save(\"/service/impl\", \"ServiceImpl.java\")\n\n##Package path (macro definition)\n#setPackageSuffix(\"service.impl\")\n\nimport com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\n\n##Table Comments (Macro Definitions)\n#tableComment(\"Table service implementation class\")\n@Service(\"$!tool.firstLowerCase($tableInfo.name)Service\")\npublic class $!{tableName} extends ServiceImpl<$!{tableInfo.name}Dao, $!{tableInfo.name}> implements $!{tableInfo.name}Service {\n}\n"}]},"Default": {"name":"Default","elementList": [{"name":"controller.java.vm","code":"##Define initial variables\n#set($tableName = $tool.append($tableInfo.name, \"Controller\"))\n##Set callback\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/controller\"))\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}controller;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})table control layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@RestController\n@RequestMapping(\"$!tool.firstLowerCase($tableInfo.name)\")\n@RequiredArgsConstructor\npublic class $!{tableName} {\n    /**\n     * Service object\n     */\n    private final $!{tableInfo.name}Service $!tool.firstLowerCase($tableInfo.name)Service;\n\n    /**\n     * Paging query\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} Filter\n     * @param pageRequest Paging object\n     * @return Query results\n     */\n    @GetMapping\n    public ResponseEntity<Page<$!{tableInfo.name}>> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryByPage($!{tool.firstLowerCase($tableInfo.name)}, pageRequest));\n    }\n\n    /**\n     * Query a single piece of data by primary key\n     *\n     * @param id Primary key\n     * @return Single result\n     */\n    @GetMapping(\"{id}\")\n    public ResponseEntity<$!{tableInfo.name}> queryById(@PathVariable(\"id\") $!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.queryById(id));\n    }\n\n    /**\n     * Add data\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} Entity\n     * @return New result\n     */\n    @PostMapping\n    public ResponseEntity<$!{tableInfo.name}> add($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.insert($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * Edit data\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} Entity\n     * @return Edit result\n     */\n    @PutMapping\n    public ResponseEntity<$!{tableInfo.name}> edit($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.update($!{tool.firstLowerCase($tableInfo.name)}));\n    }\n\n    /**\n     * Delete data\n     *\n     * @param id Primary key\n     * @return Whether the deletion was successful\n     */\n    @DeleteMapping\n    public ResponseEntity<Boolean> deleteById($!pk.shortType id) {\n        return ResponseEntity.ok(this.$!{tool.firstLowerCase($tableInfo.name)}Service.deleteById(id));\n    }\n}\n"}, {"name":"dao.java.vm","code":"##Define initial variables\n#set($tableName = $tool.append($tableInfo.name, \"Dao\"))\n##Set callback\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/dao\"))\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}dao;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.apache.ibatis.annotations.Param;\nimport org.springframework.data.domain.Pageable;\nimport java.util.List;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name}) Table database access layer\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * Query a single piece of data by ID\n     *\n     * @param $!pk.name Primary key\n     * @return Instance object\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * Query the specified row data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Query conditions\n     * @param pageable       Paging object\n     * @return List objects\n     */\n    List<$!{tableInfo.name}> queryAllByLimit($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), @Param(\"pageable\") Pageable pageable);\n\n    /**\n     * Count the total number of rows\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Query conditions\n     * @return total number of rows\n     */\n    long count($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * Add data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Number of rows affected\n     */\n    int insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * Add data in batches (MyBatis native foreach method)\n     *\n     * @param entities List<$!{tableInfo.name}> List of instance objects\n     * @return Number of rows affected\n     */\n    int insertBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * Batch add or update data by primary key (MyBatis native foreach method)\n     *\n     * @param entities List<$!{tableInfo.name}> List of instance objects\n     * @return Number of rows affected\n     * @throws org.springframework.jdbc.BadSqlGrammarException When the input parameter is an empty List, an exception to SQL statement error will be thrown, please verify the input parameter by yourself\n     */\n    int insertOrUpdateBatch(@Param(\"entities\") List<$!{tableInfo.name}> entities);\n\n    /**\n     * Change the data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Number of rows affected\n     */\n    int update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * Delete data by primary key\n     *\n     * @param $!pk.name Primary key\n     * @return Number of rows affected\n     */\n    int deleteById($!pk.shortType $!pk.name);\n}\n"}, {"name":"debug.json.vm","code":"// Disable writing build results to file\n$!callback.setWriteFile(false)\n\n// Debug table primitive object\n$!tool.debug($tableInfo.obj)\n\n// Debug column primitive object\n$!tool.debug($tableInfo.fullColumn.get(0).obj)\n\n// Debug column primitive column type\n$!tool.debug($tableInfo.fullColumn.get(0).obj.dataType)\n\n// Get the fields in the original column type\nsqlType = $!tool.getField($tableInfo.fullColumn.get(0).obj.dataType, \"typeName\")\n\n// Execute methods in primitive column types\nsqlTypeLen = $!tableInfo.fullColumn.get(0).obj.dataType.getLength()\n"}, {"name":"entity.java.vm","code":"##Import macro definition\n$!{define.vm}\n\n##Use macro definition to set callback (save location and file suffix)\n#save(\"/entity\", \".java\")\n\n##Set package suffix using macro definition\n#setPackageSuffix(\"entity\")\n\n##Implementing default package imports using global variables\n$!{autoImport.vm}\nimport java.io.Serializable;\n\n##Implement class annotation information using macro definitions\n#tableComment(\"Entity class\")\npublic class $!{tableInfo.name} implements Serializable {\n    private static final long serialVersionUID = $!tool.serial();\n#foreach($column in $tableInfo.fullColumn)\n    #if(${column.comment})/**\n     * ${column.comment}\n     */#end\n\n    private $!{tool.getClsNameByFullName($column.type)} $!{column.name};\n#end\n\n#foreach($column in $tableInfo.fullColumn)\n##Use macro definitions to implement get, set methods\n#getSetMethod($column)\n#end\n}\n"}, {"name":"mapper.xml.vm","code":"##Introduce mybatis support\n$!{mybatisSupport.vm}\n\n##Set save name and save location\n$!callback.setFileName($tool.append($!{tableInfo.name}, \"Dao.xml\"))\n$!callback.setSavePath($tool.append($modulePath, \"/src/main/resources/mapper\"))\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\">\n<mapper namespace=\"$!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao\">\n\n    <resultMap type=\"$!{tableInfo.savePackageName}.entity.$!{tableInfo.name}\" id=\"$!{tableInfo.name}Map\">\n#foreach($column in $tableInfo.fullColumn)\n        <result property=\"$!column.name\" column=\"$!column.obj.name\" jdbcType=\"$!column.ext.jdbcType\"/>\n#end\n    </resultMap>\n\n    <!--Query a single-->\n    <select id=\"queryById\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        where $!pk.obj.name = #{$!pk.name}\n    </select>\n\n    <!--Query the specified row data-->\n    <select id=\"queryAllByLimit\" resultMap=\"$!{tableInfo.name}Map\">\n        select\n          #allSqlColumn()\n\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n        limit #{pageable.offset}, #{pageable.pageSize}\n    </select>\n\n    <!--Count the total number of rows-->\n    <select id=\"count\" resultType=\"java.lang.Long\">\n        select count(1)\n        from $!tableInfo.obj.name\n        <where>\n#foreach($column in $tableInfo.fullColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                and $!column.obj.name = #{$!column.name}\n            </if>\n#end\n        </where>\n    </select>\n\n    <!--Add all columns-->\n    <insert id=\"insert\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values (#foreach($column in $tableInfo.otherColumn)#{$!{column.name}}#if($velocityHasNext), #end#end)\n    </insert>\n\n    <insert id=\"insertBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n        (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n    </insert>\n\n    <insert id=\"insertOrUpdateBatch\" keyProperty=\"$!pk.name\" useGeneratedKeys=\"true\">\n        insert into $!{tableInfo.obj.name}(#foreach($column in $tableInfo.otherColumn)$!column.obj.name#if($velocityHasNext), #end#end)\n        values\n        <foreach collection=\"entities\" item=\"entity\" separator=\",\">\n            (#foreach($column in $tableInfo.otherColumn)#{entity.$!{column.name}}#if($velocityHasNext), #end#end)\n        </foreach>\n        on duplicate key update\n        #foreach($column in $tableInfo.otherColumn)$!column.obj.name = values($!column.obj.name)#if($velocityHasNext),\n        #end#end\n\n    </insert>\n\n    <!--Modify data by primary key-->\n    <update id=\"update\">\n        update $!{tableInfo.obj.name}\n        <set>\n#foreach($column in $tableInfo.otherColumn)\n            <if test=\"$!column.name != null#if($column.type.equals(\"java.lang.String\")) and $!column.name != ''#end\">\n                $!column.obj.name = #{$!column.name},\n            </if>\n#end\n        </set>\n        where $!pk.obj.name = #{$!pk.name}\n    </update>\n\n    <!--Delete by primary key-->\n    <delete id=\"deleteById\">\n        delete from $!{tableInfo.obj.name} where $!pk.obj.name = #{$!pk.name}\n    </delete>\n\n</mapper>\n"}, {"name":"service.java.vm","code":"##Define initial variables\n#set($tableName = $tool.append($tableInfo.name, \"Service\"))\n##Set callback\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service\"))\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageRequest;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name}) Table service interface\n *\n * @author $!author\n * @since $!time.currTime()\n */\npublic interface $!{tableName} {\n\n    /**\n     * Query a single piece of data by ID\n     *\n     * @param $!pk.name Primary key\n     * @return Instance object\n     */\n    $!{tableInfo.name} queryById($!pk.shortType $!pk.name);\n\n    /**\n     * Paging query\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Filter\n     * @param pageRequest  Paging object\n     * @return Query results\n     */\n    Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}), PageRequest pageRequest);\n\n    /**\n     * Add data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Instance object\n     */\n    $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * Change the data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Instance object\n     */\n    $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name}));\n\n    /**\n     * Delete data by primary key\n     *\n     * @param $!pk.name Primary key\n     * @return Whether succeed\n     */\n    boolean deleteById($!pk.shortType $!pk.name);\n}"}, {"name":"serviceImpl.java.vm","code":"##Define initial variables\n#set($tableName = $tool.append($tableInfo.name, \"ServiceImpl\"))\n##Set callback\n$!callback.setFileName($tool.append($tableName, \".java\"))\n$!callback.setSavePath($tool.append($tableInfo.savePath, \"/service/impl\"))\n\n##Get the primary key\n#if(!$tableInfo.pkColumn.isEmpty())\n    #set($pk = $tableInfo.pkColumn.get(0))\n#end\n\n#if($tableInfo.savePackageName)package $!{tableInfo.savePackageName}.#{end}service.impl;\n\nimport $!{tableInfo.savePackageName}.entity.$!{tableInfo.name};\nimport $!{tableInfo.savePackageName}.dao.$!{tableInfo.name}Dao;\nimport $!{tableInfo.savePackageName}.service.$!{tableInfo.name}Service;\nimport org.springframework.stereotype.Service;\nimport org.springframework.data.domain.Page;\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.PageRequest;\n\nimport javax.annotation.Resource;\n\n/**\n * $!{tableInfo.comment}($!{tableInfo.name}) Table service implementation class\n *\n * @author $!author\n * @since $!time.currTime()\n */\n@Service(\"$!tool.firstLowerCase($!{tableInfo.name})Service\")\npublic class $!{tableName} implements $!{tableInfo.name}Service {\n    @Resource\n    private $!{tableInfo.name}Dao $!tool.firstLowerCase($!{tableInfo.name})Dao;\n\n    /**\n     * Query a single piece of data by ID\n     *\n     * @param $!pk.name Primary key\n     * @return Instance object\n     */\n    @Override\n    public $!{tableInfo.name} queryById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.queryById($!pk.name);\n    }\n\n    /**\n     * Paging query\n     *\n     * @param $!{tool.firstLowerCase($tableInfo.name)} Filter\n     * @param pageRequest      Paging object\n     * @return Query results\n     */\n    @Override\n    public Page<$!{tableInfo.name}> queryByPage($!{tableInfo.name} $!{tool.firstLowerCase($tableInfo.name)}, PageRequest pageRequest) {\n        long total = this.$!{tool.firstLowerCase($tableInfo.name)}Dao.count($!{tool.firstLowerCase($tableInfo.name)});\n        return new PageImpl<>(this.$!{tool.firstLowerCase($tableInfo.name)}Dao.queryAllByLimit($!{tool.firstLowerCase($tableInfo.name)}, pageRequest), pageRequest, total);\n    }\n\n    /**\n     * Add data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Instance object\n     */\n    @Override\n    public $!{tableInfo.name} insert($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.insert($!tool.firstLowerCase($!{tableInfo.name}));\n        return $!tool.firstLowerCase($!{tableInfo.name});\n    }\n\n    /**\n     * Change the data\n     *\n     * @param $!tool.firstLowerCase($!{tableInfo.name}) Instance object\n     * @return Instance object\n     */\n    @Override\n    public $!{tableInfo.name} update($!{tableInfo.name} $!tool.firstLowerCase($!{tableInfo.name})) {\n        this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.update($!tool.firstLowerCase($!{tableInfo.name}));\n        return this.queryById($!{tool.firstLowerCase($!{tableInfo.name})}.get$!tool.firstUpperCase($pk.name)());\n    }\n\n    /**\n     * Delete data by primary key\n     *\n     * @param $!pk.name Primary key\n     * @return Whether succeed\n     */\n    @Override\n    public boolean deleteById($!pk.shortType $!pk.name) {\n        return this.$!{tool.firstLowerCase($!{tableInfo.name})}Dao.deleteById($!pk.name) > 0;\n    }\n}\n"}]}},"columnConfig": {"Default": {"name":"Default","elementList": [{"title":"disable","type":"BOOLEAN","selectValue":""}, {"title":"support","type":"SELECT","selectValue":"add,edit,query,del,ui"}]}},"globalConfig": {"Default": {"name":"Default","elementList": [{"name":"autoImport.vm","value":"##Automatically import packages (only import packages required by entity properties, usually for entity classes)\n#foreach($import in $importList)\nimport $!import;\n#end"}, {"name":"define.vm","value":"##（Velocity macro definition）\n\n##Define the macro definition for setting the table name suffix, calling method: #setTableSuffix(\"Test\")\n#macro(setTableSuffix $suffix)\n    #set($tableName = $!tool.append($tableInfo.name, $suffix))\n#end\n\n##Define the macro definition for setting the package name suffix, calling method: #setPackageSuffix(\"Test\")\n#macro(setPackageSuffix $suffix)\n#if($suffix!=\"\")package #end#if($tableInfo.savePackageName!=\"\")$!{tableInfo.savePackageName}.#{end}$!suffix;\n#end\n\n##Define the macro definition that directly saves the path and file name, calling method: #save(\"/entity\", \".java\")\n#macro(save $path $fileName)\n    $!callback.setSavePath($tool.append($tableInfo.savePath, $path))\n    $!callback.setFileName($tool.append($tableInfo.name, $fileName))\n#end\n\n##Define the macro definition of table comments, calling method: #tableComment(\"comment information\")\n#macro(tableComment $desc)\n/**\n * $!{tableInfo.comment}($!{tableInfo.name})$desc\n *\n * @author $!author\n * @since $!time.currTime()\n */\n#end\n\n##Define the macro definition of GET and SET methods, calling method: #getSetMethod($column)\n#macro(getSetMethod $column)\n\n    public $!{tool.getClsNameByFullName($column.type)} get$!{tool.firstUpperCase($column.name)}() {\n        return $!{column.name};\n    }\n\n    public void set$!{tool.firstUpperCase($column.name)}($!{tool.getClsNameByFullName($column.type)} $!{column.name}) {\n        this.$!{column.name} = $!{column.name};\n    }\n#end"}, {"name":"init.vm","value":"##Initialize area\n\n##Remove the T_ prefix from the table\n$!tableInfo.setName($tool.getClassName($tableInfo.obj.name.replaceFirst(\"book_\",\"\")))\n\n##Referring to the Alibaba development manual, do not add the `is` prefix to the boolean variables in the POJO class, otherwise some framework parsing will cause serialization errors\n#foreach($column in $tableInfo.fullColumn)\n#if($column.name.startsWith(\"is\") && $column.type.equals(\"java.lang.Boolean\"))\n    $!column.setName($tool.firstLowerCase($column.name.substring(2)))\n#end\n#end\n\n##Implement dynamic exclusion columns\n#set($temp = $tool.newHashSet(\"testCreateTime\", \"otherColumn\"))\n#foreach($item in $temp)\n    #set($newList = $tool.newArrayList())\n    #foreach($column in $tableInfo.fullColumn)\n        #if($column.name!=$item)\n            ##Use $tool.call to eliminate the return value when calling a method with a return value\n            $tool.call($newList.add($column))\n        #end\n    #end\n    ##Save again\n    $tableInfo.setFullColumn($newList)\n#end\n\n##Tampering with import List\n#set($temp = $tool.newHashSet())\n#foreach($column in $tableInfo.fullColumn)\n    #if(!$column.type.startsWith(\"java.lang.\"))\n        ##Use $tool.call to eliminate the return value when calling a method with a return value\n        $tool.call($temp.add($column.type))\n    #end\n#end\n##Cover\n#set($importList = $temp)"}, {"name":"mybatisSupport.vm","value":"##Support for Mybatis, mainly used to generate xml files\n#foreach($column in $tableInfo.fullColumn)\n    ##Storage row type\n    $tool.call($column.ext.put(\"sqlType\", $tool.getField($column.obj.dataType, \"typeName\")))\n    #if($tool.newHashSet(\"java.lang.String\").contains($column.type))\n        #set($jdbcType=\"VARCHAR\")\n    #elseif($tool.newHashSet(\"java.lang.Boolean\", \"boolean\").contains($column.type))\n        #set($jdbcType=\"BOOLEAN\")\n    #elseif($tool.newHashSet(\"java.lang.Byte\", \"byte\").contains($column.type))\n        #set($jdbcType=\"BYTE\")\n    #elseif($tool.newHashSet(\"java.lang.Integer\", \"int\", \"java.lang.Short\", \"short\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Long\", \"long\").contains($column.type))\n        #set($jdbcType=\"INTEGER\")\n    #elseif($tool.newHashSet(\"java.lang.Float\", \"float\", \"java.lang.Double\", \"double\").contains($column.type))\n        #set($jdbcType=\"NUMERIC\")\n    #elseif($tool.newHashSet(\"java.util.Date\", \"java.sql.Timestamp\", \"java.time.Instant\", \"java.time.LocalDateTime\", \"java.time.OffsetDateTime\", \"\tjava.time.ZonedDateTime\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #elseif($tool.newHashSet(\"java.sql.Date\", \"java.time.LocalDate\").contains($column.type))\n        #set($jdbcType=\"TIMESTAMP\")\n    #else\n        ##Other types\n        #set($jdbcType=\"VARCHAR\")\n    #end\n    $tool.call($column.ext.put(\"jdbcType\", $jdbcType))\n#end\n\n##Define a macro to query all columns\n#macro(allSqlColumn)#foreach($column in $tableInfo.fullColumn)$column.obj.name#if($velocityHasNext), #end#end#end\n"}]}}}
